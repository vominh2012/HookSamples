// NOTE: tcvn3 only 8 contain 8 bits character, some upper case characters don't exist 
static u8 vn_tcvn3_charset[] = {0, 0xB5, 0xB8, 0xA2, 0xB7, 0xCC, 0xD0, 0xA3, 0xD7, 0xDD, 0xDF, 0xE3, 0xA4, 0xE2, 0xEF, 0xF3, 0xFD, 0xB5, 0xB8, 0xA9, 0xB7, 0xCC, 0xD0, 0xAA, 0xD7, 0xDD, 0xDF, 0xE3, 0xAB, 0xE2, 0xEF, 0xF3, 0xFD, 0xA1, 0xA8, 0xA7, 0xAE, 0xDC, 0xDC, 0xF2, 0xF2, 0xA5, 0xAC, 0xA6, 0xAD, 0xB9, 0xB9, 0xB6, 0xB6, 0xCA, 0xCA, 0xC7, 0xC7, 0xC8, 0xC8, 0xC9, 0xC9, 0xCB, 0xCB, 0xBE, 0xBE, 0xBB, 0xBB, 0xBC, 0xBC, 0xBD, 0xBD, 0xC6, 0xC6, 0xD1, 0xD1, 0xCE, 0xCE, 0xCF, 0xCF, 0xD5, 0xD5, 0xD2, 0xD2, 0xD3, 0xD3, 0xD4, 0xD4, 0xD6, 0xD6, 0xD8, 0xD8, 0xDE, 0xDE, 0xE4, 0xE4, 0xE1, 0xE1, 0xE8, 0xE8, 0xE5, 0xE5, 0xE6, 0xE6, 0xE7, 0xE7, 0xE9, 0xE9, 0xED, 0xED, 0xEA, 0xEA, 0xEB, 0xEB, 0xEC, 0xEC, 0xEE, 0xEE, 0xF4, 0xF4, 0xF1, 0xF1, 0xF8, 0xF8, 0xF5, 0xF5, 0xF6, 0xF6, 0xF7, 0xF7, 0xF9, 0xF9, 0xFA, 0xFA, 0xFE, 0xFE, 0xFB, 0xFB, 0xFC, 0xFC, 0};
static u16 vn_utf16_charset[] = {0, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C8, 0x00C9, 0x00CA, 0x00CC, 0x00CD, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D9, 0x00DA, 0x00DD, 0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E8, 0x00E9, 0x00EA, 0x00EC, 0x00ED, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F9, 0x00FA, 0x00FD, 0x0102, 0x0103, 0x0110, 0x0111, 0x0128, 0x0129, 0x0168, 0x0169, 0x01A0, 0x01A1, 0x01AF, 0x01B0, 0x1EA0, 0x1EA1, 0x1EA2, 0x1EA3, 0x1EA4, 0x1EA5, 0x1EA6, 0x1EA7, 0x1EA8, 0x1EA9, 0x1EAA, 0x1EAB, 0x1EAC, 0x1EAD, 0x1EAE, 0x1EAF, 0x1EB0, 0x1EB1, 0x1EB2, 0x1EB3, 0x1EB4, 0x1EB5, 0x1EB6, 0x1EB7, 0x1EB8, 0x1EB9, 0x1EBA, 0x1EBB, 0x1EBC, 0x1EBD, 0x1EBE, 0x1EBF, 0x1EC0, 0x1EC1, 0x1EC2, 0x1EC3, 0x1EC4, 0x1EC5, 0x1EC6, 0x1EC7, 0x1EC8, 0x1EC9, 0x1ECA, 0x1ECB, 0x1ECC, 0x1ECD, 0x1ECE, 0x1ECF, 0x1ED0, 0x1ED1, 0x1ED2, 0x1ED3, 0x1ED4, 0x1ED5, 0x1ED6, 0x1ED7, 0x1ED8, 0x1ED9, 0x1EDA, 0x1EDB, 0x1EDC, 0x1EDD, 0x1EDE, 0x1EDF, 0x1EE0, 0x1EE1, 0x1EE2, 0x1EE3, 0x1EE4, 0x1EE5, 0x1EE6, 0x1EE7, 0x1EE8, 0x1EE9, 0x1EEA, 0x1EEB, 0x1EEC, 0x1EED, 0x1EEE, 0x1EEF, 0x1EF0, 0x1EF1, 0x1EF2, 0x1EF3, 0x1EF4, 0x1EF5, 0x1EF6, 0x1EF7, 0x1EF8, 0x1EF9, 0};
static u32 vn_utf8_charset[] = {0, 0x80C3, 0x81C3, 0x82C3, 0x83C3, 0x88C3, 0x89C3, 0x8AC3, 0x8CC3, 0x8DC3, 0x92C3, 0x93C3, 0x94C3, 0x95C3, 0x99C3, 0x9AC3, 0x9DC3, 0xA0C3, 0xA1C3, 0xA2C3, 0xA3C3, 0xA8C3, 0xA9C3, 0xAAC3, 0xACC3, 0xADC3, 0xB2C3, 0xB3C3, 0xB4C3, 0xB5C3, 0xB9C3, 0xBAC3, 0xBDC3, 0x82C4, 0x83C4, 0x90C4, 0x91C4, 0xA8C4, 0xA9C4, 0xA8C5, 0xA9C5, 0xA0C6, 0xA1C6, 0xAFC6, 0xB0C6, 0xA0BAE1, 0xA1BAE1, 0xA2BAE1, 0xA3BAE1, 0xA4BAE1, 0xA5BAE1, 0xA6BAE1, 0xA7BAE1, 0xA8BAE1, 0xA9BAE1, 0xAABAE1, 0xABBAE1, 0xACBAE1, 0xADBAE1, 0xAEBAE1, 0xAFBAE1, 0xB0BAE1, 0xB1BAE1, 0xB2BAE1, 0xB3BAE1, 0xB4BAE1, 0xB5BAE1, 0xB6BAE1, 0xB7BAE1, 0xB8BAE1, 0xB9BAE1, 0xBABAE1, 0xBBBAE1, 0xBCBAE1, 0xBDBAE1, 0xBEBAE1, 0xBFBAE1, 0x80BBE1, 0x81BBE1, 0x82BBE1, 0x83BBE1, 0x84BBE1, 0x85BBE1, 0x86BBE1, 0x87BBE1, 0x88BBE1, 0x89BBE1, 0x8ABBE1, 0x8BBBE1, 0x8CBBE1, 0x8DBBE1, 0x8EBBE1, 0x8FBBE1, 0x90BBE1, 0x91BBE1, 0x92BBE1, 0x93BBE1, 0x94BBE1, 0x95BBE1, 0x96BBE1, 0x97BBE1, 0x98BBE1, 0x99BBE1, 0x9ABBE1, 0x9BBBE1, 0x9CBBE1, 0x9DBBE1, 0x9EBBE1, 0x9FBBE1, 0xA0BBE1, 0xA1BBE1, 0xA2BBE1, 0xA3BBE1, 0xA4BBE1, 0xA5BBE1, 0xA6BBE1, 0xA7BBE1, 0xA8BBE1, 0xA9BBE1, 0xAABBE1, 0xABBBE1, 0xACBBE1, 0xADBBE1, 0xAEBBE1, 0xAFBBE1, 0xB0BBE1, 0xB1BBE1, 0xB2BBE1, 0xB3BBE1, 0xB4BBE1, 0xB5BBE1, 0xB6BBE1, 0xB7BBE1, 0xB8BBE1, 0xB9BBE1, 0};
// vni is two bytes encoding
static u16 vn_vni_charset[] = {0, 0x41D8, 0x41D9, 0x41C2, 0x41D5, 0x45D8, 0x45D9, 0x45C2, 0xCC, 0xCD, 0x4FD8, 0x4FD9, 0x4FC2, 0x4FD5, 0x55D8, 0x55D9, 0x59D9, 0x61F8, 0x61F9, 0x61E2, 0x61F5, 0x65F8, 0x65F9, 0x65E2, 0xEC, 0xED, 0x6FF8, 0x6FF9, 0x6FE2, 0x6FF5, 0x75F8, 0x75F9, 0x79F9, 0x41CA, 0x61EA, 0xD1, 0xF1, 0xD3, 0xF3, 0x55D5, 0x75F5, 0xD4, 0xF4, 0xD6, 0xF6, 0x41CF, 0x61EF, 0x41DB, 0x61FB, 0x41C1, 0x61E1, 0x41C0, 0x61E0, 0x41C5, 0x61E5, 0x41C3, 0x61E3, 0x41C4, 0x61E4, 0x41C9, 0x61E9, 0x41C8, 0x61E8, 0x41DA, 0x61FA, 0x41DC, 0x61FC, 0x41CB, 0x61EB, 0x45CF, 0x65EF, 0x45DB, 0x65FB, 0x45D5, 0x65F5, 0x45C1, 0x65E1, 0x45C0, 0x65E0, 0x45C5, 0x65E5, 0x45C3, 0x65E3, 0x45C4, 0x65E4, 0xC6, 0xE6, 0xD2, 0xF2, 0x4FCF, 0x6FEF, 0x4FDB, 0x6FFB, 0x4FC1, 0x6FE1, 0x4FC0, 0x6FE0, 0x4FC5, 0x6FE5, 0x4FC3, 0x6FE3, 0x4FC4, 0x6FE4, 0xD4D9, 0xF4F9, 0xD4D8, 0xF4F8, 0xD4DB, 0xF4FB, 0xD4D5, 0xF4F5, 0xD4CF, 0xF4EF, 0x55CF, 0x75EF, 0x55DB, 0x75FB, 0xD6D9, 0xF6F9, 0xD6D8, 0xF6F8, 0xD6DB, 0xF6FB, 0xD6D5, 0xF6F5, 0xD6CF, 0xF6EF, 0x59D8, 0x79F8, 0xCE, 0xEE, 0x59DB, 0x79FB, 0x59D5, 0x79F5, 0};

// jump table for 1 byte tcvn3 characters
static u8 tcvn3_tb[256 - 0xA1] = {0x21, 0x3, 0x7, 0xC, 0x29, 0x2B, 0x23, 0x22, 0x13, 0x17, 0x1C, 0x2A, 0x2C, 0x24, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x11, 0x30, 0x14, 0x12, 0x2E, 0x0, 0x3E, 0x40, 0x42, 0x3C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44, 0x34, 0x36, 0x38, 0x32, 0x3A, 0x15, 0x0, 0x48, 0x4A, 0x16, 0x46, 0x4E, 0x50, 0x52, 0x4C, 0x54, 0x18, 0x56, 0x0, 0x0, 0x0, 0x26, 0x19, 0x58, 0x1A, 0x0, 0x5C, 0x1D, 0x1B, 0x5A, 0x60, 0x62, 0x64, 0x5E, 0x66, 0x6A, 0x6C, 0x6E, 0x68, 0x70, 0x1E, 0x0, 0x74, 0x28, 0x1F, 0x72, 0x78, 0x7A, 0x7C, 0x76, 0x7E, 0x80, 0x84, 0x86, 0x20, 0x82, 0x0};


static u8 utf8_hash_tb2[71] = {0x17, 0x0, 0x19, 0x0, 0x11, 0x2, 0x0, 0x0, 0x25, 0x27, 0x0, 0x1A, 0xB, 0x1D, 0x0, 0x15, 0x6, 0x14, 0x8, 0x0, 0x24, 0x2C, 0x1F, 0x0, 0x20, 0x0, 0x21, 0x2A, 0x0, 0xC, 0x0, 0x0, 0x12, 0x3, 0x0, 0x0, 0x26, 0x28, 0xE, 0x1B, 0x0, 0x0, 0x0, 0x16, 0x7, 0x18, 0x9, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x2B, 0x22, 0xA, 0x1C, 0xD, 0x0, 0x5, 0x13, 0x4, 0x0, 0x23, 0x0, 0x1E, 0xF, 0x0, 0x10, 0x0, 0x29};
static u8 utf8_hash_tb3[99] = {0x59, 0x2D, 0x58, 0x0, 0x57, 0x0, 0x56, 0x0, 0x55, 0x86, 0x54, 0x85, 0x53, 0x84, 0x52, 0x83, 0x51, 0x82, 0x50, 0x81, 0x4F, 0x80, 0x4E, 0x7F, 0x4D, 0x7E, 0x0, 0x7D, 0x0, 0x7C, 0x0, 0x7B, 0x0, 0x7A, 0x0, 0x79, 0x0, 0x78, 0x4C, 0x77, 0x4B, 0x76, 0x4A, 0x75, 0x49, 0x74, 0x48, 0x73, 0x47, 0x72, 0x46, 0x71, 0x45, 0x70, 0x44, 0x6F, 0x43, 0x6E, 0x42, 0x6D, 0x41, 0x6C, 0x40, 0x6B, 0x3F, 0x6A, 0x3E, 0x69, 0x3D, 0x68, 0x3C, 0x67, 0x3B, 0x66, 0x3A, 0x65, 0x39, 0x64, 0x38, 0x63, 0x37, 0x62, 0x36, 0x61, 0x35, 0x60, 0x34, 0x5F, 0x33, 0x5E, 0x32, 0x5D, 0x31, 0x5C, 0x30, 0x5B, 0x2F, 0x5A, 0x2E};

u32 utf8_2bytes_hash(u32 val) {
    // min_j found : 71 k=6916
    u32 hash = (val ^ 6916) % 71;
    return hash;
}

u32 utf8_3bytes_hash(u32 val) {
    return val % 99;
}

int utf8_count_bytes(char *utf8)
{
    // NOTICE: it's still not complete validate if string is utf8
    char c = *utf8;
    if ((c & 0x1F) == 0x1E)
    {
        return 4;
    }
    else if ((c & 0xF0) == 0xE0)
    {
        return 3;
    }
    else if ((c & 0xE0) == 0xC0)
    {
        return 2;
    }
    
    return 1;
}

void print_tb(u8 *tb, u8 count) {
    for (u8 i = 0; i < count; ++i)
        printf("0x%X, ", tb[i]);
}

void build_utf8_hash_table() {
#if 0
    for (int i = 1; i < array_count(vn_utf8_charset) - 1; ++i) {
        u32 utf8 = vn_utf8_charset[i];
        u32 num_bytes = utf8_count_bytes((char*)&utf8);
        if (num_bytes == 2) {
            u32 hash_key = utf8_2bytes_hash(utf8);
            assert(utf8_hash_tb2[hash_key] == 0);
            utf8_hash_tb2[hash_key] = i;
        } else if (num_bytes == 3) {
            u32 hash_key = utf8_3bytes_hash(utf8);
            assert(utf8_hash_tb3[hash_key] == 0);
            utf8_hash_tb3[hash_key] = i;
        }
        else {
            assert(0); // something wrong
        }
    }
    
    print_tb(utf8_hash_tb2, array_count(utf8_hash_tb2));
    printf("\n\n");
    print_tb(utf8_hash_tb3, array_count(utf8_hash_tb3));
#endif
}

static inline int tb_value_to_str(u32 val, char *str)
{
    // value    memory  utf8
    // 0x80C3   C380    C380
    // >><<     &
    int num_bytes = 0;
    
    char *c = (char*)&val;
    for (u32 i = 0; i < 4; ++i)
    {
        if (c[i]) { *str++ = c[i]; num_bytes++; }
        else break;
    }
    
    return num_bytes;
}

u8 get_utf8_index(u32 utf8) {
    u8 idx = 0;
    
    u32 num_bytes = 0;
    u32 tmp = utf8;
    while (tmp) {
        tmp = tmp >> 8;
        num_bytes++;
    }
    
    if (num_bytes == 2) {
        u32 hash_key = utf8_2bytes_hash(utf8);
        idx = utf8_hash_tb2[hash_key];
        if (idx && vn_utf8_charset[idx] != utf8) {
            idx = 0;
        }
    } else if (num_bytes == 3) {
        u32 hash_key = utf8_3bytes_hash(utf8);
        idx = utf8_hash_tb3[hash_key];
        if (idx && vn_utf8_charset[idx] != utf8) {
            idx = 0;
        }
    }
    
    return idx;
}

bool utf8_to_tcvn(u32 utf8, char *s_tcvn) {
    bool converted = false;
    
    u8 idx = get_utf8_index(utf8);
    if (idx) {
        u8 tcvn = vn_tcvn3_charset[idx];
        *s_tcvn = tcvn;
        converted = true;
    } 
    
    return converted;
}

void s_utf8_to_tcvn(char *utf8, char *tcvn) {
    u8*utf8_pos = (u8*)utf8;
    char *tcvn_pos = tcvn;
    while (*utf8_pos) {
        u32 utf8_num_bytes = utf8_count_bytes((char*)utf8_pos);
        
        // prevent out of bound access
        u32 num_bytes = 0;
        char val_buf[4] = {0};
        while (num_bytes < utf8_num_bytes && num_bytes < 4)
        {
            if (utf8_pos[num_bytes])
                val_buf[num_bytes] = utf8_pos[num_bytes];
            else
                break;
            
            num_bytes++;
        }
        
        u32 utf8_val = *(u32*)val_buf;
        bool converted = utf8_to_tcvn(utf8_val, tcvn_pos);
        
        if (converted) {
            utf8_pos += num_bytes;
            tcvn_pos += 1;
        } else {
            *tcvn_pos++ = *utf8_pos++;
        }
    }
}

#if 0
void find_good_utf8_hash() {
    u32 table_size = 44;
    u32 min_j = 255;
    u32 min_k = 0;
    u32 first_item_index = 0;
    
    for (u32 k = 0; k < 0xFFFF; ++k) {
        for (u32 j = table_size; j < 255; ++j) {
            u32 temp_table[255] = {};
            u32 conflict = 0;
            
            for (int i = 0; i < 44; ++i) {
                u32 val = vn_utf8_charset[i];
                assert(utf8_count_bytes((char*)&val) == 2);
                u32 hash = (val) % j;
                if (temp_table[hash] == 0)
                    temp_table[hash] = 1;
                else {
                    conflict = 1;
                    break;
                }
            }
            if (!conflict) {
                if (min_j > j) {
                    min_j = j;
                    min_k = k;
                    u32 z = 0;
                    while (temp_table[z] == 0)
                        z++;
                    first_item_index = z;
                }
            }
            //}
        }
    }
    
    printf("min_j found : %d k=%d\n findex=%d", min_j, min_k, first_item_index);
}
#endif

static int utf16_to_utf8(unsigned short s, char *utf8)
{
    char *c = (char*)utf8;
    if (s < 0x0080)
    {
        *c |= s >> 1;
        return 1;
    }
    else if (s < 0x0800)
    {
        *c = 0xC0 | (s >> 6); c++;
        *c = 0x80 | (s & 0x3F);
        return 2;
    }
    else if (s <= 0xFFFF) // we only handle 2 bytes utf16
    {
        *c = 0xE0 | (s >> 12); c++;
        *c = 0x80 | ((s >> 6) & 0x3F); c++;
        *c = 0x80 | (s & 0x3F);
        return 3;
    }
    
    // invalid
    return 0;
}


static void test_utf8_to_tcvn() 
{
    for (u32 i = 0; i < ArrayCount(vn_utf8_charset); ++i) {
        char buf[4] = {};
        utf8_to_tcvn(vn_utf8_charset[i], buf);
        
        u32 len = strlen(buf);
        char *temp_buf = (char*)(&vn_tcvn3_charset[i]);
        Assert(memcmp(buf, temp_buf, len) == 0);
    }
    
    u8 utf8_test_str[] = {0x20,0xC3,0x80,0x20,0xC3,0x81,0x20,0xC3,0x82,0x20,0xC3,0x83,0x20,0xC3,0x88,0x20,0xC3,0x89,0x20,0xC3,0x8A,0x20,0xC3,0x8C,0x20,0xC3,0x8D,0x20,0xC3,0x92,0x20,0xC3,0x93,0x20,0xC3,0x94,0x20,0xC3,0x95,0x20,0xC3,0x99,0x20,0xC3,0x9A,0x20,0xC3,0x9D,0x20,0xC3,0xA0,0x20,0xC3,0xA1,0x20,0xC3,0xA2,0x20,0xC3,0xA3,0x20,0xC3,0xA8,0x20,0xC3,0xA9,0x20,0xC3,0xAA,0x20,0xC3,0xAC,0x20,0xC3,0xAD,0x20,0xC3,0xB2,0x20,0xC3,0xB3,0x20,0xC3,0xB4,0x20,0xC3,0xB5,0x20,0xC3,0xB9,0x20,0xC3,0xBA,0x20,0xC3,0xBD,0x20,0xC4,0x82,0x20,0xC4,0x83,0x20,0xC4,0x90,0x20,0xC4,0x91,0x20,0xC4,0xA8,0x20,0xC4,0xA9,0x20,0xC5,0xA8,0x20,0xC5,0xA9,0x20,0xC6,0xA0,0x20,0xC6,0xA1,0x20,0xC6,0xAF,0x20,0xC6,0xB0,0x20,0xE1,0xBA,0xA0,0x20,0xE1,0xBA,0xA1,0x20,0xE1,0xBA,0xA2,0x20,0xE1,0xBA,0xA3,0x20,0xE1,0xBA,0xA4,0x20,0xE1,0xBA,0xA5,0x20,0xE1,0xBA,0xA6,0x20,0xE1,0xBA,0xA7,0x20,0xE1,0xBA,0xA8,0x20,0xE1,0xBA,0xA9,0x20,0xE1,0xBA,0xAA,0x20,0xE1,0xBA,0xAB,0x20,0xE1,0xBA,0xAC,0x20,0xE1,0xBA,0xAD,0x20,0xE1,0xBA,0xAE,0x20,0xE1,0xBA,0xAF,0x20,0xE1,0xBA,0xB0,0x20,0xE1,0xBA,0xB1,0x20,0xE1,0xBA,0xB2,0x20,0xE1,0xBA,0xB3,0x20,0xE1,0xBA,0xB4,0x20,0xE1,0xBA,0xB5,0x20,0xE1,0xBA,0xB6,0x20,0xE1,0xBA,0xB7,0x20,0xE1,0xBA,0xB8,0x20,0xE1,0xBA,0xB9,0x20,0xE1,0xBA,0xBA,0x20,0xE1,0xBA,0xBB,0x20,0xE1,0xBA,0xBC,0x20,0xE1,0xBA,0xBD,0x20,0xE1,0xBA,0xBE,0x20,0xE1,0xBA,0xBF,0x20,0xE1,0xBB,0x80,0x20,0xE1,0xBB,0x81,0x20,0xE1,0xBB,0x82,0x20,0xE1,0xBB,0x83,0x20,0xE1,0xBB,0x84,0x20,0xE1,0xBB,0x85,0x20,0xE1,0xBB,0x86,0x20,0xE1,0xBB,0x87,0x20,0xE1,0xBB,0x88,0x20,0xE1,0xBB,0x89,0x20,0xE1,0xBB,0x8A,0x20,0xE1,0xBB,0x8B,0x20,0xE1,0xBB,0x8C,0x20,0xE1,0xBB,0x8D,0x20,0xE1,0xBB,0x8E,0x20,0xE1,0xBB,0x8F,0x20,0xE1,0xBB,0x90,0x20,0xE1,0xBB,0x91,0x20,0xE1,0xBB,0x92,0x20,0xE1,0xBB,0x93,0x20,0xE1,0xBB,0x94,0x20,0xE1,0xBB,0x95,0x20,0xE1,0xBB,0x96,0x20,0xE1,0xBB,0x97,0x20,0xE1,0xBB,0x98,0x20,0xE1,0xBB,0x99,0x20,0xE1,0xBB,0x9A,0x20,0xE1,0xBB,0x9B,0x20,0xE1,0xBB,0x9C,0x20,0xE1,0xBB,0x9D,0x20,0xE1,0xBB,0x9E,0x20,0xE1,0xBB,0x9F,0x20,0xE1,0xBB,0xA0,0x20,0xE1,0xBB,0xA1,0x20,0xE1,0xBB,0xA2,0x20,0xE1,0xBB,0xA3,0x20,0xE1,0xBB,0xA4,0x20,0xE1,0xBB,0xA5,0x20,0xE1,0xBB,0xA6,0x20,0xE1,0xBB,0xA7,0x20,0xE1,0xBB,0xA8,0x20,0xE1,0xBB,0xA9,0x20,0xE1,0xBB,0xAA,0x20,0xE1,0xBB,0xAB,0x20,0xE1,0xBB,0xAC,0x20,0xE1,0xBB,0xAD,0x20,0xE1,0xBB,0xAE,0x20,0xE1,0xBB,0xAF,0x20,0xE1,0xBB,0xB0,0x20,0xE1,0xBB,0xB1,0x20,0xE1,0xBB,0xB2,0x20,0xE1,0xBB,0xB3,0x20,0xE1,0xBB,0xB4,0x20,0xE1,0xBB,0xB5,0x20,0xE1,0xBB,0xB6,0x20,0xE1,0xBB,0xB7,0x20,0xE1,0xBB,0xB8,0x20,0xE1,0xBB,0xB9,0x20};
    u8 expect_tcvn3_str[] = {0x20,0xB5,0x20,0xB8,0x20,0xA2,0x20,0xB7,0x20,0xCC,0x20,0xD0,0x20,0xA3,0x20,0xD7,0x20,0xDD,0x20,0xDF,0x20,0xE3,0x20,0xA4,0x20,0xE2,0x20,0xEF,0x20,0xF3,0x20,0xFD,0x20,0xB5,0x20,0xB8,0x20,0xA9,0x20,0xB7,0x20,0xCC,0x20,0xD0,0x20,0xAA,0x20,0xD7,0x20,0xDD,0x20,0xDF,0x20,0xE3,0x20,0xAB,0x20,0xE2,0x20,0xEF,0x20,0xF3,0x20,0xFD,0x20,0xA1,0x20,0xA8,0x20,0xA7,0x20,0xAE,0x20,0xDC,0x20,0xDC,0x20,0xF2,0x20,0xF2,0x20,0xA5,0x20,0xAC,0x20,0xA6,0x20,0xAD,0x20,0xB9,0x20,0xB9,0x20,0xB6,0x20,0xB6,0x20,0xCA,0x20,0xCA,0x20,0xC7,0x20,0xC7,0x20,0xC8,0x20,0xC8,0x20,0xC9,0x20,0xC9,0x20,0xCB,0x20,0xCB,0x20,0xBE,0x20,0xBE,0x20,0xBB,0x20,0xBB,0x20,0xBC,0x20,0xBC,0x20,0xBD,0x20,0xBD,0x20,0xC6,0x20,0xC6,0x20,0xD1,0x20,0xD1,0x20,0xCE,0x20,0xCE,0x20,0xCF,0x20,0xCF,0x20,0xD5,0x20,0xD5,0x20,0xD2,0x20,0xD2,0x20,0xD3,0x20,0xD3,0x20,0xD4,0x20,0xD4,0x20,0xD6,0x20,0xD6,0x20,0xD8,0x20,0xD8,0x20,0xDE,0x20,0xDE,0x20,0xE4,0x20,0xE4,0x20,0xE1,0x20,0xE1,0x20,0xE8,0x20,0xE8,0x20,0xE5,0x20,0xE5,0x20,0xE6,0x20,0xE6,0x20,0xE7,0x20,0xE7,0x20,0xE9,0x20,0xE9,0x20,0xED,0x20,0xED,0x20,0xEA,0x20,0xEA,0x20,0xEB,0x20,0xEB,0x20,0xEC,0x20,0xEC,0x20,0xEE,0x20,0xEE,0x20,0xF4,0x20,0xF4,0x20,0xF1,0x20,0xF1,0x20,0xF8,0x20,0xF8,0x20,0xF5,0x20,0xF5,0x20,0xF6,0x20,0xF6,0x20,0xF7,0x20,0xF7,0x20,0xF9,0x20,0xF9,0x20,0xFA,0x20,0xFA,0x20,0xFE,0x20,0xFE,0x20,0xFB,0x20,0xFB,0x20,0xFC,0x20,0xFC,0x20};
    
    char buf[1024] = {};
    s_utf8_to_tcvn((char*)utf8_test_str, buf);
    Assert(memcmp(buf, expect_tcvn3_str, ArrayCount(expect_tcvn3_str)) == 0);
    
    // normal ascii should not be changed
    char s[1024] = {};
    char output[ArrayCount(s) * 3] = {0};
    int i = 0;
    int j = 0;
    for (int i = 1; i < 128; ++i)
    {
        s[j++] = i;
    }
    s_utf8_to_tcvn(s, output);
    Assert(memcmp(s, output, ArrayCount(s)) == 0);
    
}


static void build_tcvn_table()
{
    build_utf8_hash_table();
    test_utf8_to_tcvn();
    
#if 0
    
    u16 tcvn3_excluded[] = {0x00DA, 0x1EE4, 0x1EEA, 0x1EEC, 0x1EEE, 0x1EE8, 0x1EF0, 0x1EF2, 0x1EF6, 0x1EF8, 0x00DD, 0x1EF4, 0x00C0, 0x1EA2, 0x00C3, 0x00C1, 0x1EA0, 0x1EB6, 0x1EAC, 0x00C8, 0x1EBA, 0x1EBC, 0x00C9, 0x1EB8, 0x1EC6, 0x00CC, 0x1EC8, 0x0128, 0x00CD, 0x1ECA, 0x00D2, 0x1ECE, 0x00D5, 0x00D3, 0x1ECC, 0x1ED8, 0x1EDC, 0x1EDE, 0x1EE0, 0x1EDA, 0x1EE2, 0x00D9, 0x1EE6, 0x0168, 0x1EB2, 0x1EB4, 0x1EAE, 0x1EA6, 0x1EA8, 0x1EAA, 0x1EA4, 0x1EC0, 0x1EC2, 0x1EC4, 0x1EBE, 0x1ED2, 0x1ED4, 0x1ED6, 0x1ED0};
    
    u8 i = 1;
    
    while (vn_tcvn3_charset[i])
    {
        u8 val = vn_tcvn3_charset[i];
        u32 utf8 = 0;
        
        bool skip = 0;
        u16 utf16 = vn_utf16_charset[i];
        for (u32 i = 0; i < ArrayCount(tcvn3_excluded); ++i) {
            if (utf16 == tcvn3_excluded[i])
            {
                skip = 1;
                break;
            }
        }
        if (!skip)
        {
            tcvn3_tb[val - 0xA1] = i;
        }
        
        ++i;
    }
    
    print_tb(tcvn3_tb, ArrayCount(tcvn3_tb));
#endif
}

static u8 get_tcvn3_index(u8 c) {
    u8 idx = 0;
    
    if (c >= 0xA1)
    {
        idx = tcvn3_tb[c - 0xA1];
    }
    
    return idx;
}

static u32 tcvn_to_utf8(u8 c, char *utf8)
{
    u32 write_bytes = 1;
    
    u8 idx = get_tcvn3_index(c);
    if (idx) {
        u32 val = vn_utf8_charset[idx];
        write_bytes = tb_value_to_str(val, utf8);
    }
    else {
        *utf8 = c;
    }
    
    return write_bytes;
}

static u32 s_tcvn_to_utf8(char *s, char *utf8)
{
    char *s_pos = s;
    char *utf8_pos = utf8;
    
    while (*s_pos) {
        u32 write_bytes = tcvn_to_utf8(*s_pos, utf8_pos);
        ++s_pos;
        utf8_pos += write_bytes;
    }
    
    return utf8_pos - utf8;
}

void file_to_hex_string(char *file_name) {
    FILE * f = fopen(file_name, "rb");
    if (f) {
        fseek(f, 0, SEEK_END);
        long fsize = ftell(f);
        fseek(f, 0, SEEK_SET);
        
        u8 *buf = (u8*)malloc(fsize);
        if (buf && fread(buf, 1, fsize, f) == fsize) {
            printf("\n");
            for (int i = 0; i < fsize; ++i) 
            {
                printf("0x%X,", buf[i]);
            }
            printf("\n");
        }
        fclose(f);
        free(buf);
    }
    
}

static void test_tcvn_to_utf8()
{
    // testing each tcvn character
    for (int i = 0; i < ArrayCount(vn_utf16_charset); ++i)
    {
        char buf_from_utf16[4] = {};
        utf16_to_utf8(vn_utf16_charset[i], buf_from_utf16);
        
        u8 s = vn_tcvn3_charset[i];
        
        char buf_from_tcvn[4] = {};
        tcvn_to_utf8(s, buf_from_tcvn);
    }
    
    u8 tcvn3_test_str[] = {0x20,0xB5,0x20,0xB8,0x20,0xA2,0x20,0xB7,0x20,0xCC,0x20,0xD0,0x20,0xA3,0x20,0xD7,0x20,0xDD,0x20,0xDF,0x20,0xE3,0x20,0xA4,0x20,0xE2,0x20,0xEF,0x20,0xF3,0x20,0xFD,0x20,0xB5,0x20,0xB8,0x20,0xA9,0x20,0xB7,0x20,0xCC,0x20,0xD0,0x20,0xAA,0x20,0xD7,0x20,0xDD,0x20,0xDF,0x20,0xE3,0x20,0xAB,0x20,0xE2,0x20,0xEF,0x20,0xF3,0x20,0xFD,0x20,0xA1,0x20,0xA8,0x20,0xA7,0x20,0xAE,0x20,0xDC,0x20,0xDC,0x20,0xF2,0x20,0xF2,0x20,0xA5,0x20,0xAC,0x20,0xA6,0x20,0xAD,0x20,0xB9,0x20,0xB9,0x20,0xB6,0x20,0xB6,0x20,0xCA,0x20,0xCA,0x20,0xC7,0x20,0xC7,0x20,0xC8,0x20,0xC8,0x20,0xC9,0x20,0xC9,0x20,0xCB,0x20,0xCB,0x20,0xBE,0x20,0xBE,0x20,0xBB,0x20,0xBB,0x20,0xBC,0x20,0xBC,0x20,0xBD,0x20,0xBD,0x20,0xC6,0x20,0xC6,0x20,0xD1,0x20,0xD1,0x20,0xCE,0x20,0xCE,0x20,0xCF,0x20,0xCF,0x20,0xD5,0x20,0xD5,0x20,0xD2,0x20,0xD2,0x20,0xD3,0x20,0xD3,0x20,0xD4,0x20,0xD4,0x20,0xD6,0x20,0xD6,0x20,0xD8,0x20,0xD8,0x20,0xDE,0x20,0xDE,0x20,0xE4,0x20,0xE4,0x20,0xE1,0x20,0xE1,0x20,0xE8,0x20,0xE8,0x20,0xE5,0x20,0xE5,0x20,0xE6,0x20,0xE6,0x20,0xE7,0x20,0xE7,0x20,0xE9,0x20,0xE9,0x20,0xED,0x20,0xED,0x20,0xEA,0x20,0xEA,0x20,0xEB,0x20,0xEB,0x20,0xEC,0x20,0xEC,0x20,0xEE,0x20,0xEE,0x20,0xF4,0x20,0xF4,0x20,0xF1,0x20,0xF1,0x20,0xF8,0x20,0xF8,0x20,0xF5,0x20,0xF5,0x20,0xF6,0x20,0xF6,0x20,0xF7,0x20,0xF7,0x20,0xF9,0x20,0xF9,0x20,0xFA,0x20,0xFA,0x20,0xFE,0x20,0xFE,0x20,0xFB,0x20,0xFB,0x20,0xFC,0x20,0xFC,0x20};
    u8 utf8_expected[] = {0x20,0xC3,0xA0,0x20,0xC3,0xA1,0x20,0xC3,0x82,0x20,0xC3,0xA3,0x20,0xC3,0xA8,0x20,0xC3,0xA9,0x20,0xC3,0x8A,0x20,0xC3,0xAC,0x20,0xC3,0xAD,0x20,0xC3,0xB2,0x20,0xC3,0xB3,0x20,0xC3,0x94,0x20,0xC3,0xB5,0x20,0xC3,0xB9,0x20,0xC3,0xBA,0x20,0xC3,0xBD,0x20,0xC3,0xA0,0x20,0xC3,0xA1,0x20,0xC3,0xA2,0x20,0xC3,0xA3,0x20,0xC3,0xA8,0x20,0xC3,0xA9,0x20,0xC3,0xAA,0x20,0xC3,0xAC,0x20,0xC3,0xAD,0x20,0xC3,0xB2,0x20,0xC3,0xB3,0x20,0xC3,0xB4,0x20,0xC3,0xB5,0x20,0xC3,0xB9,0x20,0xC3,0xBA,0x20,0xC3,0xBD,0x20,0xC4,0x82,0x20,0xC4,0x83,0x20,0xC4,0x90,0x20,0xC4,0x91,0x20,0xC4,0xA9,0x20,0xC4,0xA9,0x20,0xC5,0xA9,0x20,0xC5,0xA9,0x20,0xC6,0xA0,0x20,0xC6,0xA1,0x20,0xC6,0xAF,0x20,0xC6,0xB0,0x20,0xE1,0xBA,0xA1,0x20,0xE1,0xBA,0xA1,0x20,0xE1,0xBA,0xA3,0x20,0xE1,0xBA,0xA3,0x20,0xE1,0xBA,0xA5,0x20,0xE1,0xBA,0xA5,0x20,0xE1,0xBA,0xA7,0x20,0xE1,0xBA,0xA7,0x20,0xE1,0xBA,0xA9,0x20,0xE1,0xBA,0xA9,0x20,0xE1,0xBA,0xAB,0x20,0xE1,0xBA,0xAB,0x20,0xE1,0xBA,0xAD,0x20,0xE1,0xBA,0xAD,0x20,0xE1,0xBA,0xAF,0x20,0xE1,0xBA,0xAF,0x20,0xE1,0xBA,0xB1,0x20,0xE1,0xBA,0xB1,0x20,0xE1,0xBA,0xB3,0x20,0xE1,0xBA,0xB3,0x20,0xE1,0xBA,0xB5,0x20,0xE1,0xBA,0xB5,0x20,0xE1,0xBA,0xB7,0x20,0xE1,0xBA,0xB7,0x20,0xE1,0xBA,0xB9,0x20,0xE1,0xBA,0xB9,0x20,0xE1,0xBA,0xBB,0x20,0xE1,0xBA,0xBB,0x20,0xE1,0xBA,0xBD,0x20,0xE1,0xBA,0xBD,0x20,0xE1,0xBA,0xBF,0x20,0xE1,0xBA,0xBF,0x20,0xE1,0xBB,0x81,0x20,0xE1,0xBB,0x81,0x20,0xE1,0xBB,0x83,0x20,0xE1,0xBB,0x83,0x20,0xE1,0xBB,0x85,0x20,0xE1,0xBB,0x85,0x20,0xE1,0xBB,0x87,0x20,0xE1,0xBB,0x87,0x20,0xE1,0xBB,0x89,0x20,0xE1,0xBB,0x89,0x20,0xE1,0xBB,0x8B,0x20,0xE1,0xBB,0x8B,0x20,0xE1,0xBB,0x8D,0x20,0xE1,0xBB,0x8D,0x20,0xE1,0xBB,0x8F,0x20,0xE1,0xBB,0x8F,0x20,0xE1,0xBB,0x91,0x20,0xE1,0xBB,0x91,0x20,0xE1,0xBB,0x93,0x20,0xE1,0xBB,0x93,0x20,0xE1,0xBB,0x95,0x20,0xE1,0xBB,0x95,0x20,0xE1,0xBB,0x97,0x20,0xE1,0xBB,0x97,0x20,0xE1,0xBB,0x99,0x20,0xE1,0xBB,0x99,0x20,0xE1,0xBB,0x9B,0x20,0xE1,0xBB,0x9B,0x20,0xE1,0xBB,0x9D,0x20,0xE1,0xBB,0x9D,0x20,0xE1,0xBB,0x9F,0x20,0xE1,0xBB,0x9F,0x20,0xE1,0xBB,0xA1,0x20,0xE1,0xBB,0xA1,0x20,0xE1,0xBB,0xA3,0x20,0xE1,0xBB,0xA3,0x20,0xE1,0xBB,0xA5,0x20,0xE1,0xBB,0xA5,0x20,0xE1,0xBB,0xA7,0x20,0xE1,0xBB,0xA7,0x20,0xE1,0xBB,0xA9,0x20,0xE1,0xBB,0xA9,0x20,0xE1,0xBB,0xAB,0x20,0xE1,0xBB,0xAB,0x20,0xE1,0xBB,0xAD,0x20,0xE1,0xBB,0xAD,0x20,0xE1,0xBB,0xAF,0x20,0xE1,0xBB,0xAF,0x20,0xE1,0xBB,0xB1,0x20,0xE1,0xBB,0xB1,0x20,0xE1,0xBB,0xB3,0x20,0xE1,0xBB,0xB3,0x20,0xE1,0xBB,0xB5,0x20,0xE1,0xBB,0xB5,0x20,0xE1,0xBB,0xB7,0x20,0xE1,0xBB,0xB7,0x20,0xE1,0xBB,0xB9,0x20,0xE1,0xBB,0xB9,0x20};
    
    char buf[ArrayCount(utf8_expected)] = {};
    s_tcvn_to_utf8((char*)tcvn3_test_str, buf);
    Assert(memcmp(buf, utf8_expected, ArrayCount(utf8_expected)) == 0);
    
#if 0
    file_to_hex_string("tcvn3_to_utf8_list.txt");
    FILE *f = fopen("tcvn3_list_out.txt", "wb");
    
    for (u32 i = 0; i < ArrayCount(vn_utf8_charset) - 1; ++i) {
        char buf[4] = {};
        utf8_to_tcvn(vn_utf8_charset[i], buf);
        
        uchar s = vn_tcvn3_charset[i];
        char utf8[4] = {};
        tcvn_to_utf8(s, utf8);
        
        char tmp[32] = {};
        sprintf(tmp, "%s ", buf);
        //sprintf(tmp, "%s %X %X\n", buf, vn_tcvn3_charset[i], vn_utf16_charset[i]);
        
        if (f) fwrite(tmp, strlen(tmp), 1, f);
    }
    
    fclose(f);
    
#endif
    
    // normal ascii should not be changed
    char s[1024] = {};
    char output[ArrayCount(s) * 3] = {0};
    int i = 0;
    int j = 0;
    for (int i = 1; i < 128; ++i)
    {
        s[j++] = i;
    }
    s_tcvn_to_utf8(s, output);
    Assert(memcmp(s, output, ArrayCount(s)) == 0);
    
    // testing on long string
    i = 0; j = 0;
    while (vn_tcvn3_charset[i] != 0)
    {
        u16 val = vn_tcvn3_charset[i++];
        if (val >> 8 != 0)
            s[j++] = val >> 8;
        if (val & 0xFF)
            s[j++] = val & 0xFF;
        
    }
    
    for (i = 1; i < 255; ++i)
        s[j++] = i;
    
    int n = 1000; // testing loop
    while (n-- > 0)
    {
        s_tcvn_to_utf8(s, output);
        
        // making small change and keep going
        s[j++ % ArrayCount(s)] = j % 255 + 1;
    }
}